#
# Copyright (C) 2012 Kyeong Soo (Joseph) Kim. All rights reserved.
#
# This ini file provides architecture-specific configurations for an
# abstract model of shared access architectures -- like TDM-PONs or
# DOCSIS cable Internet access -- for the comparison study of
# next-generation network (NGN) access architectures.
#
# Note that [General] section, i.e., configurations common to all
# architectures including those of traffic models, is provided by
# "General.ini".
#

[General]
### [General] section providing configurations common to all network
### architectures
include General.ini


########################################################################
### Command environment
########################################################################
#cmdenv-express-mode = true
#cmdenv-performance-display = true	# for monitoring
#cmdenv-status-frequency = 2min	# default is 2s

########################################################################
# Network/system settings
########################################################################
#network = inet.examples.ngoa.isp_traffic_control.NgnAccess
network = inet.examples.ngoa.isp_traffic_control.NgnAccessWithDLThruputMeter

########################################################################
### NIC (of ONUs, OLT)
########################################################################

########################################################################
### Architecture-Specific Settings
########################################################################
[Config SharedBase]
result-dir = results/Shared
**.host[*].numUdpApps = 1
**.server.numUdpApps = 1

[Config SharedBaseLowerRate]
## For service rates <= 20 Mb/s
## combined input rate is about 2 Mb/s (based on 'Silence of the Lambs' or 'Star Wars 4' video clip)
extends = SharedBase
*.uni_rate = ${ur=100}Mbps	# UNI rate
*.distribution_rate = ${dr=100}Mbps	# distribution rate
**.server.udpApp[*].lineRate = ${ur}Mbps
**.server.udpApp[*].messageLength = exponential(1000B)
**.server.udpApp[*].messagePeriod = exponential(1s)
**.server.udpApp[*].startTime = uniform(1s, 5s)

[Config SharedBaseHigherRate]
## For service rates >= 30 Mb/s
## combined input rate is about 30 Mb/s (based on 'Terminator 2' video clip)
extends = SharedBase
*.uni_rate = ${ur=1}Gbps	# UNI rate
*.distribution_rate = ${dr=1}Gbps	# distribution rate
**.server.udpApp[*].messageLength = exponential(10000B)
**.server.udpApp[*].messagePeriod = exponential(1s)
**.server.udpApp[*].startTime = uniform(1s, 5s)

[Config DrrTbmBase]
extends = SharedBase
### TBF configurations (at tagged ports toward ODN)
**.olt.mac[0].queueType = "DRRVLANQueue"  # OLT downstream queue

[Config CsfqTbmBase]
extends = SharedBase
### TBF configurations (at tagged ports toward ODN)
**.olt.mac[0].queueType = "CSFQVLANQueue"  # OLT downstream queue

########################################################################
### With DRRVLANQueue
########################################################################

###
### for dr=100M
###
#[Config drr-tbm_N2_dr100M]
#extends = SharedBaseLowerRate, DrrTbmBase
#result-dir = results/Shared/drr-tbm_N2_dr100M
#### General
#sim-time-limit = 3min
#warmup-period = 1min
#repeat = 1
#### Network configuraion
#*.N = ${N=3}
#*.n = ${n=1}
#**.olt.numSubscribers = ${N}
#**.olt.mac[0].queue.numFlows = ${N}
#### Server
#**.server.numUdpApps = ${N}
## below is the configuration for 16 Mbps traffic generation
#**.server.udpApp[0].destAddresses = "host[0]"
##**.server.udpApp[0].messageLength = exponential(2000B)
##**.server.udpApp[0].messagePeriod = exponential(1ms)
#**.server.udpApp[0].messageLength = 1000B
#**.server.udpApp[0].messagePeriod = 0.5ms
## below is the configuration for 64 Mbps traffic generation
#**.server.udpApp[1].destAddresses = "host[1]"
##**.server.udpApp[1].messageLength = exponential(4000B)
##**.server.udpApp[1].messagePeriod = exponential(1ms)
#**.server.udpApp[1].messageLength = 1000B
#**.server.udpApp[1].messagePeriod = 0.125ms
## below is the configuration for 64 Mbps traffic generation
#**.server.udpApp[2].destAddresses = "host[2]"
##**.server.udpApp[2].messageLength = exponential(4000B)
##**.server.udpApp[2].messagePeriod = exponential(1ms)
#**.server.udpApp[2].messageLength = 1000B
#**.server.udpApp[2].messagePeriod = 0.125ms
#### TBM
#**.olt.mac[0].queue.vids = "10 11 12"
#**.olt.mac[0].meter[*].bucketSize = 1000000B
#**.olt.mac[0].meter[*].peakRate = ${dr}Mbps
#**.olt.mac[0].meter[0].meanRate = 30Mbps
#**.olt.mac[0].meter[1].meanRate = 20Mbps
#**.olt.mac[0].meter[2].meanRate = 50Mbps
#### DRR
#**.olt.mac[0].queue.quanta = "4566 3044 7610"	# 3, 2 & 5 times of MTU (i.e., 1522)

###
### for dr=100M & debugging
###
[Config drr-tbm_debug]
extends = SharedBaseLowerRate, DrrTbmBase
result-dir = results/test
### General
sim-time-limit = 2min
warmup-period = 0.2min
repeat = 1
### Network configuraion
*.N = ${N=3}
*.n = ${n=1}
**.olt.numSubscribers = ${N}
**.olt.mac[0].queue.numFlows = ${N}
### Server
**.server.numUdpApps = ${N}
# below is the configuration for 16 Mbps traffic generation
**.server.udpApp[0].destAddresses = "host[0]"
**.server.udpApp[0].messageLength = 1000B
**.server.udpApp[0].messagePeriod = 0.5ms
# below is the configuration for 64 Mbps traffic generation
**.server.udpApp[1].destAddresses = "host[1]"
**.server.udpApp[1].messageLength = 1000B
**.server.udpApp[1].messagePeriod = 0.125ms
# below is the configuration for 64 Mbps traffic generation
**.server.udpApp[2].destAddresses = "host[2]"
**.server.udpApp[2].messageLength = 1000B
**.server.udpApp[2].messagePeriod = 0.125ms
### TBM
**.olt.mac[0].queue.vids = "10 11 12"
**.olt.mac[0].meter[*].bucketSize = 1000000B
**.olt.mac[0].meter[*].peakRate = ${dr}Mbps
**.olt.mac[0].meter[0].meanRate = 30Mbps
**.olt.mac[0].meter[1].meanRate = 20Mbps
**.olt.mac[0].meter[2].meanRate = 50Mbps
### DRR
**.olt.mac[0].queue.quanta = "4566 3044 7610"	# 3, 2 & 5 times of MTU (i.e., 1522)

[Config drr-tbm_debug_dynamic]
extends = drr-tbm_debug
**.server.udpApp[0].startTime = 10s
**.server.udpApp[1].startTime = 1s
**.server.udpApp[2].startTime = 1s

########################################################################
### With CSFQVLANQueue
########################################################################

###
### for dr=100M
###
#[Config csfq-tbm_dr100M_mr2M]
#extends = SharedBaseLowerRate, CsfqTbmBase
#result-dir = results/Shared/csfq-tbm_dr100M_mr2M
#### Network configurations
##*.N = ${N=5, 10, 20..50}
#*.N = ${N=2}
#*.n = ${n=1}
#**.olt.numSubscribers = ${N}
#### TBF configurations
#**.olt.mac[0].queue.vids = "10 11"
#**.olt.mac[0].queue.meanRate = 30Mbps
#**.olt.mac[0].queue.bucketSize = 1000000B
#**.olt.mac[0].queue.peakRate = ${dr}Mbps

###
### for dr=100M & debugging
###
[Config csfq-tbm_debug]
extends = SharedBaseLowerRate, CsfqTbmBase
result-dir = results/test
### General
sim-time-limit = 30s
warmup-period = 3s
repeat = 1
### Network configuraion
*.N = ${N=3}
*.n = ${n=1}
**.olt.numSubscribers = ${N}
**.olt.mac[0].queueType = "CSFQVLANQueue"  # OLT downstream queue
**.olt.mac[0].queue.numFlows = ${N}
### Server
**.server.numUdpApps = ${N}
# below is the configuration for 16 Mbps traffic generation
**.server.udpApp[0].destAddresses = "host[0]"
**.server.udpApp[0].messageLength = 1000B
**.server.udpApp[0].messagePeriod = 0.5ms
# below is the configuration for 64 Mbps traffic generation
**.server.udpApp[1].destAddresses = "host[1]"
**.server.udpApp[1].messageLength = 1000B
**.server.udpApp[1].messagePeriod = 0.125ms
# below is the configuration for 64 Mbps traffic generation
**.server.udpApp[2].destAddresses = "host[2]"
**.server.udpApp[2].messageLength = 1000B
**.server.udpApp[2].messagePeriod = 0.125ms
### TBM
**.olt.mac[0].queue.vids = "10 11 12"
**.olt.mac[0].meter[*].bucketSize = 1000000B
**.olt.mac[0].meter[*].peakRate = ${dr}Mbps
**.olt.mac[0].meter[0].meanRate = 30Mbps
**.olt.mac[0].meter[1].meanRate = 20Mbps
**.olt.mac[0].meter[2].meanRate = 50Mbps
### DRR
**.olt.mac[0].queue.quanta = "4566 3044 7610"	# 3, 2 & 5 times of MTU (i.e., 1522)

[Config csfq-tbm_debug_dynamic]
extends = csfq-tbm_debug
**.server.udpApp[0].startTime = 10s
**.server.udpApp[1].startTime = 1s
**.server.udpApp[2].startTime = 1s