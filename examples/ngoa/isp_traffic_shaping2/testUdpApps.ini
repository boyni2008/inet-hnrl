#
# Copyright (C) 2012 Kyeong Soo (Joseph) Kim. All rights reserved.
#
# This ini file is for a test of UDP appllications.
#

[General]
network = inet.examples.ngoa.isp_traffic_shaping2.testUdpApps
tkenv-plugin-path = ../../../etc/plugins
#cmdenv-status-frequency = 10s  # default is 2s

#debug-on-errors = true
sim-time-limit = 15min
#warmup-period = 2min	# depends on 'startTime' of applications
repeat = 1

# results recording
result-dir = results/test/udpApps
**.scalar-recording = true
#**.host.videoApp[*].video\ stream\ eed.vector-recording = true
**.vector-recording = false

*.numWcts = ${numWcts=1}	# number of WCT source/sink paris

########################################################################
### TCP parameters
########################################################################
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
**.tcp.mss = 1460	# optimal for Ethernet interface whose MTU is 1500 bytes

########################################################################
### NIC (of server, hosts, and Ethernet switches)
########################################################################
**.frameCapacity = 10000	# in frames; based on RTT(10ms)*BW(10G) (default is 100)
**.txQueueLimit = 10000		# in frames; based on RTT(10ms)*BW(10G) (default is 100)

###
### Burst Meter
###
**.burstMeter.maxIFG = 1	# maximum IFGs allowed between two consecutive Ethernet frames of a same burst
###
### TBF configurations (at tagged ports toward ODN)
###
**.olt.mac[0].queueType = "DropTailVLANTBFQueue"  # OLT downstream queue
**.olt.mac[0].queue.numQueues = ${numWcts}
**.olt.mac[0].queue.mtu = 1522B	# for Ethernet frame with header(18) + VLAN tag (4) + maximum payload (1500)
**.olt.mac[0].queue.meanRate = ${mr=2}Mbps
**.olt.mac[0].queue.burstSize = ${bs=100}*1000000B	# 100 MB
**.olt.mac[0].queue.peakRate = ${pr=100}Mbps
###
### UDP applications at wct sources
###
**.wct_source[*].numUdpApps = 1
**.wct_source[*].udpAppType = "UDPBurstApp"
**.wct_source[*].udpApp.localPort = 7000
**.wct_source[*].udpApp.destPort = 8000
#**.wct_source[*].udpApp.messageLength = (${pr})*(${bs})/((${pr})-(${mr}))*(1472.0/1522)*1000000B	# not taking into account UDP/IP overhead yet
**.wct_source[*].udpApp.messageLength = ((${pr})*(${bs})/((${pr})-(${mr}))*(1472.0/1522)*1000000+50000)*1B
**.wct_source[*].udpApp.messagePeriod = 8*(${bs})*(${pr})/((${mr})*((${pr})-(${mr})))*1s
#**.wct_source[*].udpApp.messageLength = 102*1000000B
# **.wct_source[*].udpApp.messageLength = 51*1000000B
#**.wct_source[*].udpApp.messagePeriod = 408.16s
# **.wct_source[*].udpApp.messagePeriod = 450s
#**.wct_source.udpApp[*].startTime = uniform(1s, 5s)
**.wct_source[*].udpApp.startTime = 0s
**.wct_source[*].udpApp.lineRate = 100Mbps
###
### UDP sinks at wct sinks
###
**.wct_sink[*].numUdpApps = 1
**.wct_sink[*].udpAppType = "UDPSink"
**.wct_sink[*].udpApp[*].localPort = 8000
