#
# Copyright (C) 2012 Kyeong Soo (Joseph) Kim. All rights reserved.
#
# This ini file provides [General] section -- configurations common
# to all architectures -- for the comparison study of next-generation
# optical access architectures.
#
# It provides configurations for a host with the following hybrid
# traffic models:
# - HTTP:  Behavioural model of a web user (HTTP/1.1-persistent mode transfer)
#		   browsing web pages with several embedded objects (e.g., images,
#		   applets, frames, etc) based on [2].
#		   It uses HTTPClientApp and TCPGenericSrvApp.
# - FTP:   FTP model based on the parameters in [2].
#          It uses HTTPClientApp and TCPGenericSrvApp as well.
# - Video: Streaming video model based on H.264/AVC trace files from
#          ASU video trace library [3]. It uses UDPVideoStreamCliWithTrace2
#          and UDPVideoStreamSvrWithTrace.
#
# References
# [1] N. K. Shankaranarayanan, Z. Jiang, and P. Mishra, "User-perceived
#     performance of web-browsing and interactive data in HFC cable access
#     networks," Proc. of ICC, June 2001.
# [2] cdma2000 Evaulation Methodology, 3GPP2 C.R1002-B, 3GPP2 Std., Rev. B,
#     Dec. 2009. [Online]. Available:
#     http://www.3gpp2.org/public_html/specs/C.R1002-B%20v1.0_Evaluation_Methodology.pdf
# [3] Video trace library, Arizona State University. [Online]. Available:
#     http://trace.eas.asu.edu/
#


[General]
total-stack = 32MiB
#network = inet.examples.ngoa.traffic_control.Reference	# included as default; to be changed in architecture-specific ini
#debug-on-errors = true
sim-time-limit = 3h
warmup-period = 20min	# depends on 'startTime' of applications and video trace duration (~10 min. for Terminator 2)
repeat = 10


########################################################################
### Results recording
########################################################################
result-dir = results  # included as default; to be changed in architecture-specific ini
**.scalar-recording = true
**.vector-recording = false
**.olt.ethg$o[*].channel.throughput.result-recording-modes = all	# for throughput measurement
**.httpApp[*].*.result-recording-modes = all
**.ftpApp[*].*.result-recording-modes = all
**.delayMeter.*.result-recording-modes = all
#**.delayMeter.**.vector-recording = true
#**.tcp.**.vector-recording = true

########################################################################
### Command environment
########################################################################
cmdenv-express-mode = true
cmdenv-performance-display = true	# for monitoring
cmdenv-status-frequency = 2min	# default is 2s

########################################################################
### Tk environment
########################################################################
tkenv-plugin-path = ../../../etc/plugins

########################################################################
### Network/system settings
########################################################################
#*.N = 16  # number of ONUs (subscribers)
#*.n = ${n=1}  # number of hosts (users) per ONU (subscriber)
#*.uni_rate = ${ur=100}Mbps	# rate of UNI
#*.uni_delay = ${ud=0}s  # delay at UNIs
#*.distribution_rate = ${dr=0.1, 1}Gbps	# rate of distribution fiber
*.backbone_rate = ${br=100}Gbps	# rate of backbone link
#*.backbone_delay = ${bd=4.7}ms  # delay in backbone network (giving total RTT of 10 ms including access)

########################################################################
### Performance measurement modules (BurstMeter and DelayMeter) 
########################################################################
**.burstMeter.maxIFG = 5	# maximum IFGs allowed between two consecutive Ethernet frames of a same burst

########################################################################
### Host (user)
########################################################################
###
### HTTP (based on [2])
###
**.host[*].httpAppType = "HttpClientApp"
**.host[*].httpApp[*].address = ""
#**.host[*].tcpApp[*].port = -1  # Due to issues in assigning ephemeral
                                 # port numer, we assign port number
                                 # statically in HttpClientApp.ned instead.
**.host[*].httpApp[*].connectAddress = "server"
**.host[*].httpApp[*].connectPort = 80
**.host[*].httpApp[*].startTime = uniform(1s, 5s)
**.host[*].httpApp[*].htmlObjectLength = trunc_lognormal(8.35B, 1.37B, 100B, 2e6B)  # "replyLength" of the 1st request (for HTML object)
**.host[*].httpApp[*].numEmbeddedObjects = trunc_pareto(2, 1.1, 55)-2
**.host[*].httpApp[*].embeddedObjectLength = trunc_lognormal(6.17B, 2.36B, 50B, 2e6B)
**.host[*].httpApp[*].requestLength = uniform(0B, 700B)
**.host[*].httpApp[*].parsingTime = exponential(7.69s)
**.host[*].httpApp[*].thinkTime = 0s  # no time gap between requests (for embedded objects)
**.host[*].httpApp[*].idleInterval = exponential(0.033s)  # time gap between sessions ("Reading Time" in [2])
**.host[*].httpApp[*].reconnectInterval = 30s
###
### FTP (based on [2])
###
**.host[*].ftpAppType = "HttpClientApp"  # use HTTP cleint module now
#**.host[*].ftpApp[*].active = true
**.host[*].ftpApp[*].address = ""
#**.host[*].ftpApp[*].port = -1
**.host[*].ftpApp[*].connectAddress = "server"
**.host[*].ftpApp[*].connectPort = 1000
**.host[*].ftpApp[*].startTime = uniform(1s, 5s)
**.host[*].ftpApp[*].htmlObjectLength = trunc_lognormal(14.45B, 0.35B, 0B, 5e6B)  # "file size" to download
**.host[*].ftpApp[*].numEmbeddedObjects = 0
**.host[*].ftpApp[*].embeddedObjectLength = 0B
**.host[*].ftpApp[*].requestLength = uniform(0B, 700B)
**.host[*].ftpApp[*].parsingTime = 0s  # no parsimg time for FTP
**.host[*].ftpApp[*].thinkTime = 0s  # no time gap between requests for FTP
**.host[*].ftpApp[*].idleInterval = exponential(166.667s)  # time gap between sessions ("Reading Time" in [3])
**.host[*].ftpApp[*].reconnectInterval = 30s
###
### Streaming video (based on [3])
###
#**.host[*].videoAppType = "UDPVideoStreamCliWithTrace"
**.host[*].videoAppType = "UDPVideoStreamCliWithTrace2"
**.host[*].videoApp[*].localPort = 9999
**.host[*].videoApp[*].serverAddress = "server"
**.host[*].videoApp[*].serverPort = 3088
**.host[*].videoApp[*].startTime = uniform(1s, 5s)
**.host[*].videoApp[*].startupDelay = 5s
# # below are for 'Silence of The Labms' clip
# **.host[*].videoApp[*].fps = 30  # frames per second
# **.host[*].videoApp[*].numTraceFrames = 53997
# **.host[*].videoApp[*].gopSize = 16
# **.host[*].videoApp[*].numBFrames = 3

########################################################################
### Server settings
########################################################################
###
### HTTP
###
**.server.httpSrvType = "TCPGenericSrvApp"
### Another choice of server app (it does the same as TCPGenericSrvApp):
#  **.server.httpSrvType="TCPSrvHostApp"
#  **.server.httpSrv[*].serverThreadClass="TCPGenericSrvThread"
**.server.httpSrv[*].address = ""
**.server.httpSrv[*].port = 80
**.server.httpSrv[*].replyDelay = 0
###
### FTP
###
**.server.ftpSrvType = "TCPGenericSrvApp"
**.server.ftpSrv[*].address = ""
**.server.ftpSrv[*].port = 1000
**.server.ftpSrv[*].replyDelay = 0
###
### Streaming video (based on [3])
###
**.server.videoSrvType = "UDPVideoStreamSvrWithTrace"
**.server.videoSrv[*].serverPort = 3088
**.server.videoSrv[*].fps = 30  # frames per second
**.server.videoSrv[*].appOverhead = 12B  # size of application layer overhead (e.g., RTP header)
**.server.videoSrv[*].maxPayloadSize = 1460B  # maximum size of payload to be carried in RTP packets
# # below are for 'Silence of The Labms' clip
# **.server.videoSrv[*].traceFile = "../videoTraces/silenceOfTheLambs_verbose"

########################################################################
### TCP parameters
########################################################################
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
**.tcp.mss = 1460	# optimal for Ethernet interface whose MTU is 1500 bytes

########################################################################
### NIC (of server, hosts, and Ethernet switches)
########################################################################
**.olt.relayUnit.addressTableSize = 2000	# >> maximum of 960 streams for N=64, n=5, and 3 apps/host
**.accessSwitch.relayUnit.addressTableSize = 2000	# >> maximum of 960 streams for N=64, n=5, and 3 apps/host
#**.eth[*].queueType = "DropTailQueue"  # (default is "DropTailQueue")
#**.eth[*].queueType = "REDQueue" # in routers (for better fairness among sessions)
#**.eth[*].queue.frameCapacity = 10000  # in frames; based on RTT(10ms)*BW(10G) (default is 100)
#**.eth[*].queue.frameCapacity = 1000 # in Ethernet switches
**.frameCapacity = 10000	# in frames; based on RTT(10ms)*BW(10G) (default is 100)
**.txQueueLimit = 10000		# in frames; based on RTT(10ms)*BW(10G) (default is 100)


########################################################################
### Command environment
########################################################################
#cmdenv-express-mode = true
#cmdenv-performance-display = true	# for monitoring
#cmdenv-status-frequency = 2min	# default is 2s

########################################################################
# Network/system settings
########################################################################
network = inet.examples.ngoa.isp_traffic_shaping.NgnAccess
#network = inet.examples.ngoa.isp_traffic_shaping.NgnAccessWithPerformanceMeters

########################################################################
### NIC (of ONUs, OLT)
########################################################################

########################################################################
### Architecture-Specific Settings
########################################################################
[Config SharedBase]
result-dir = results/Shared
#*.N = ${N=1}	# number of ONUs
### Traffic configuration
**.host[*].numHttpApps = 1
**.server.numHttpSrvs = 1
**.host[*].numFtpApps = 1
**.server.numFtpSrvs = 1
**.host[*].numVideoApps = 1
**.server.numVideoSrvs = 1

[Config SharedBaseLowerRate]
## For service rates <= 20 Mb/s
## combined input rate is about 2 Mb/s (based on 'Silence of the Lambs' video clip)
extends = SharedBase
*.uni_rate = ${ur=100}Mbps	# UNI rate
*.distribution_rate = ${dr=100}Mbps	# distribution rate
# *.n = ${n=1..10}	# number of hosts per ONU
## for 'Silence of The Labms' clip
**.host[*].videoApp[*].fps = 30  # frames per second
**.host[*].videoApp[*].numTraceFrames = 53997
**.host[*].videoApp[*].gopSize = 16
**.host[*].videoApp[*].numBFrames = 3
**.server.videoSrv[*].traceFile = "../videoTraces/silenceOfTheLambs_verbose"

[Config SharedBaseHigherRate]
## For service rates >= 30 Mb/s
## combined input rate is about 30 Mb/s (based on 'Silence of the Lambs' video clip)
extends = SharedBase
*.uni_rate = ${ur=1}Gbps	# UNI rate
*.distribution_rate = ${dr=1}Gbps	# distribution rate
# *.n = ${n=1..33}	# number of hosts per ONU
## for 'Terminator2' video clip
**.host[*].videoApp[*].fps = 30  # frames per second
**.host[*].videoApp[*].numTraceFrames = 17998  # for 'Terminator 2'
**.host[*].videoApp[*].gopSize = 12  # for 'Terminator 2'
**.host[*].videoApp[*].numBFrames = 2  # for 'Terminator 2'
**.server.videoSrv[*].traceFile = "../videoTraces/terminator2_verbose"

[Config ShapedBase]
extends = SharedBase
### TBF configurations (at tagged ports toward ODN)
**.olt.mac[0].queueType = "DropTailVLANTBFQueue"  # OLT downstream queue
**.olt.mac[0].queue.numQueues = ${N}	# set to number of ONUs
**.olt.mac[0].queue.mtu = 1522B	# for Ethernet frame with header(18) + VLAN tag (4) + maximum payload (1500)

########################################################################
### With traffic shaping: Unbalanced
########################################################################
[Config shaped_dr100M_mr10_unbalanced]
result-dir = results/Shared/shaped_dr100M_mr10_unbalanced
### Network configurations
*.N = ${N=1..10}
*.n = ${n=5}
**.olt.numSubscribers = ${N}
*.uni_rate = ${ur=100}Mbps	# UNI rate
*.distribution_rate = ${dr=100}Mbps	# distribution rate
### Traffic configuration
## Server
**.server.numHttpSrvs = 1
**.server.numFtpSrvs = 1
**.server.numVideoSrvs = 1
**.server.videoSrv[*].traceFile = "../videoTraces/silenceOfTheLambs_verbose"
## Malicious subscribers (with worst-case traffic patterns)
**.host[0].numHttpApps = 0
**.host[0].numFtpApps = 1
**.host[0].numVideoApps = 0
## Conformant subscribers
**.host[*].numHttpApps = 1
**.host[*].numFtpApps = 1
**.host[*].numVideoApps = 1
# *.n = ${n=1..10}	# number of hosts per ONU
## for 'Silence of The Labms' clip
**.host[*].videoApp[*].fps = 30  # frames per second
**.host[*].videoApp[*].numTraceFrames = 53997
**.host[*].videoApp[*].gopSize = 16
**.host[*].videoApp[*].numBFrames = 3
### TBF configurations
**.olt.mac[0].queueType = "DropTailVLANTBFQueue"  # OLT downstream queue
**.olt.mac[0].queue.numQueues = ${N}	# set to number of ONUs
**.olt.mac[0].queue.mtu = 1522B	# for Ethernet frame with header(18) + VLAN tag (4) + maximum payload (1500)
**.olt.mac[0].queue.meanRate = ${mr=10}Mbps
**.olt.mac[0].queue.burstSize = ${bs=10, 100}*1000000B
**.olt.mac[0].queue.peakRate = ${dr}Mbps
